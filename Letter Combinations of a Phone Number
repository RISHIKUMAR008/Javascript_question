Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []






function letterCombinations(digits) {
    if (!digits) return []; // Return empty array for empty input

    const phoneMap = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz'
    };

    const result = [];
    
    function backtrack(index, path) {
        // Base case: if the path length equals the digits length
        if (path.length === digits.length) {
            result.push(path);
            return;
        }

        // Get the letters for the current digit
        const possibleLetters = phoneMap[digits[index]];
        
        // Recurse for each letter
        for (let letter of possibleLetters) {
            backtrack(index + 1, path + letter);
        }
    }

    backtrack(0, '');
    return result;
}

// Examples
console.log(letterCombinations("23")); // Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
console.log(letterCombinations(""));   // Output: []
console.log(letterCombinations("2"));  // Output: ["a","b","c"]
