Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically:

Each letter in pattern maps to exactly one unique word in s.
Each unique word in s maps to exactly one letter in pattern.
No two letters map to the same word, and no two words map to the same letter.
 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"

Output: true

Explanation:

The bijection can be established as:

'a' maps to "dog".
'b' maps to "cat".
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"

Output: false

Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"

Output: false

















function wordPattern(pattern, s) {
    let words = s.split(" ");
    if (pattern.length !== words.length) return false;

    let mapPatternToWord = {};
    let mapWordToPattern = {};

    for (let i = 0; i < pattern.length; i++) {
        let char = pattern[i];
        let word = words[i];

        // Check if pattern -> word mapping is consistent
        if (mapPatternToWord[char] !== undefined && mapPatternToWord[char] !== word) {
            return false;
        }

        // Check if word -> pattern mapping is consistent
        if (mapWordToPattern[word] !== undefined && mapWordToPattern[word] !== char) {
            return false;
        }

        // Establish mapping
        mapPatternToWord[char] = word;
        mapWordToPattern[word] = char;
    }

    return true;
}

// Test cases
console.log(wordPattern("abba", "dog cat cat dog")); // true
console.log(wordPattern("abba", "dog cat cat fish")); // false
console.log(wordPattern("aaaa", "dog cat cat dog")); // false
console.log(wordPattern("abba", "dog dog dog dog")); // false
