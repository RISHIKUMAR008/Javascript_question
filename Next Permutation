function nextPermutation(arr) {
    let k = -1;
    
    // Step 1: Find the largest index k such that arr[k] < arr[k + 1]
    for (let i = arr.length - 2; i >= 0; i--) {
        if (arr[i] < arr[i + 1]) {
            k = i;
            break;
        }
    }

    // If no such index exists, reverse the array (last permutation)
    if (k === -1) {
        arr.reverse();
        return arr;
    }

    // Step 2: Find the largest index l greater than k such that arr[k] < arr[l]
    for (let l = arr.length - 1; l > k; l--) {
        if (arr[k] < arr[l]) {
            // Step 3: Swap arr[k] with arr[l]
            [arr[k], arr[l]] = [arr[l], arr[k]];
            break;
        }
    }

    // Step 4: Reverse the sequence from arr[k + 1] to the end
    let start = k + 1;
    let end = arr.length - 1;
    
    while (start < end) {
        [arr[start], arr[end]] = [arr[end], arr[start]];
        start++;
        end--;
    }

    return arr;
}

// Example usage:
let arr = [1, 2, 3];
console.log(nextPermutation(arr)); // Output: [1, 3, 2]
